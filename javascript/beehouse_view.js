// Generated by CoffeeScript 1.10.0
(function() {
  module.exports = function(beehouse_id) {
    return {
      _id: '_design/' + beehouse._id,
      views: {
        weight: {
          map: (function(doc) {
            if (doc.type === "measure" && doc.name === "global-weight" && doc.beehouse_id === "id_placeholder") {
              return emit(doc.timestamp, doc);
            }
          }).toString().replace("id_placeholder", beehouse._id)
        },
        morning_weight: {
          map: (function(doc) {
            var time, timestamp, tokens;
            if (doc.type === "measure" && doc.name === "global-weight" && doc.beehouse_id === "id_placeholder") {
              timestamp = new Date(doc.timestamp);
              if (timestamp.getHours() === 7) {
                tokens = doc.timestamp.split("T");
                time = tokens[0] + "T" + tokens[1].split(":")[0];
                return emit(time, [doc.value, 1]);
              }
            }
          }).toString().replace("id_placeholder", beehouse._id),
          reduce: (function(key, values) {
            var factors, i, j, len, totalFactors, totalWeight, weight, weights;
            weights = values.map(function(v) {
              return v[0];
            });
            factors = values.map(function(v) {
              return v[1];
            });
            totalFactors = sum(factors);
            totalWeight = 0;
            for (i = j = 0, len = weights.length; j < len; i = ++j) {
              weight = weights[i];
              totalWeight += weight * factors[i];
            }
            totalWeight = totalWeight / totalFactors;
            return [totalWeight, totalFactors];
          }).toString()
        },
        evening_weight: {
          map: (function(doc) {
            var time, timestamp, tokens;
            if (doc.type === "measure" && doc.name === "global-weight" && doc.beehouse_id === "id_placeholder") {
              timestamp = new Date(doc.timestamp);
              if (timestamp.getHours() === 21) {
                tokens = doc.timestamp.split("T");
                time = tokens[0] + "T" + tokens[1].split(":")[0];
                return emit(time, [doc.value, 1]);
              }
            }
          }).toString().replace("id_placeholder", beehouse._id),
          reduce: (function(key, values) {
            var factors, i, j, len, totalFactors, totalWeight, weight, weights;
            weights = values.map(function(v) {
              return v[0];
            });
            factors = values.map(function(v) {
              return v[1];
            });
            totalFactors = sum(factors);
            totalWeight = 0;
            for (i = j = 0, len = weights.length; j < len; i = ++j) {
              weight = weights[i];
              totalWeight += weight * factors[i];
            }
            totalWeight = totalWeight / totalFactors;
            return [totalWeight, totalFactors];
          }).toString()
        },
        weight_by_week: {
          map: (function(doc) {
            var day, tag, weekNo, yearStart;
            if (doc.type === "measure" && doc.name === "global-weight" && doc.beehouse_id === "id_placeholder") {
              day = new Date(doc.timestamp);
              day.setHours(0, 0, 0);
              day.setDate(day.getDate() + 4 - (day.getDay() || 7));
              yearStart = new Date(day.getFullYear(), 0, 1);
              weekNo = Math.ceil((((day - yearStart) / 86400000) + 1) / 7);
              tag = yearStart.getFullYear() + "W" + ("0" + weekNo).slice(-2);
              return emit(tag, [doc.value, 1]);
            }
          }).toString().replace("id_placeholder", beehouse._id),
          reduce: (function(key, values) {
            var factors, i, j, len, totalFactors, totalWeight, weight, weights;
            weights = values.map(function(v) {
              return v[0];
            });
            factors = values.map(function(v) {
              return v[1];
            });
            totalFactors = sum(factors);
            totalWeight = 0;
            for (i = j = 0, len = weights.length; j < len; i = ++j) {
              weight = weights[i];
              totalWeight += weight * factors[i];
            }
            totalWeight = totalWeight / totalFactors;
            return [totalWeight, totalFactors];
          }).toString()
        }
      }
    };
  };

}).call(this);
